<html>
<head>
<title>Title</title>
</head>
<body>
<p>This is an R HTML document. When you click the <b>Knit HTML</b> button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:</p>
<!--begin.rcode
summary(cars)
end.rcode-->
<p>You can also embed plots, for example:</p>
<!--begin.rcode fig.width=7, fig.height=6
plot(cars)
end.rcode-->
</body>
</html>
# Output the script and result
sink("human_activities", append=FALSE, split=FALSE)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
set.seed(12345)
# Loading the training data set
# Replace all missing data with "NA"
trainingset <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
# Loading the testing data set
testingset <- read.csv('pml-testing.csv', na.strings=c("NA","#DIV/0!", ""))
# Delete columns with missing values
trainingset<-trainingset[,colSums(is.na(trainingset)) == 0]
testingset <-testingset[,colSums(is.na(testingset)) == 0]
# Delete irrelevant variables.
trainingset   <-trainingset[,-c(1:7)]
testingset <-testingset[,-c(1:7)]
# Crate new data set
dim(trainingset)
dim(testingset)
head(trainingset)
head(testingset)
subsamples <- createDataPartition(y=trainingset$classe, p=0.75, list=FALSE)
subTraining <- trainingset[subsamples, ]
subTesting <- trainingset[-subsamples, ]
dim(subTraining)
dim(subTesting)
head(subTraining)
head(subTesting)
# plot the results
plot(subTraining$classe, col="cadetblue2", main="The subTraining data set", xlab="classe levels", ylab="Frequency")
model1 <- rpart(classe ~ ., data=subTraining, method="class")
# Predicting
prediction1 <- predict(model1, subTesting, type = "class")
# Plot of the Decision Tree
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
# Test results on our subTesting data set
confusionMatrix(prediction1, subTesting$classe)
model2 <- randomForest(classe ~. , data=subTraining, method="class")
# Predicting
prediction2 <- predict(model2, subTesting, type = "class")
# Test results on subTesting data set
confusionMatrix(prediction2, subTesting$classe)
# predict outcome levels on the original Testing data set using Random Forest algorithm
predictfinal <- predict(model2, testingset, type="class")
predictfinal
# Output the script and result
sink("human_activities", append=FALSE, split=FALSE)
sink()
sink("human_activities.pdf", append=FALSE, split=FALSE)
sink()
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
# Loading the training data set
# Replace all missing data with "NA"
trainingset <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
# Loading the testing data set
testingset <- read.csv('pml-testing.csv', na.strings=c("NA","#DIV/0!", ""))
# Delete columns with missing values
trainingset<-trainingset[,colSums(is.na(trainingset)) == 0]
testingset <-testingset[,colSums(is.na(testingset)) == 0]
# Delete irrelevant variables.
trainingset   <-trainingset[,-c(1:7)]
testingset <-testingset[,-c(1:7)]
# Crate new data set
dim(trainingset)
dim(testingset)
head(trainingset)
head(testingset)
subsamples <- createDataPartition(y=trainingset$classe, p=0.75, list=FALSE)
subTraining <- trainingset[subsamples, ]
subTesting <- trainingset[-subsamples, ]
dim(subTraining)
dim(subTesting)
head(subTraining)
head(subTesting)
# plot the results
plot(subTraining$classe, col="cadetblue2", main="The subTraining data set", xlab="classe levels", ylab="Frequency")
model1 <- rpart(classe ~ ., data=subTraining, method="class")
# Predicting
prediction1 <- predict(model1, subTesting, type = "class")
# Plot of the Decision Tree
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
# Test results on our subTesting data set
confusionMatrix(prediction1, subTesting$classe)
model2 <- randomForest(classe ~. , data=subTraining, method="class")
# Predicting
prediction2 <- predict(model2, subTesting, type = "class")
# Test results on subTesting data set
confusionMatrix(prediction2, subTesting$classe)
# predict outcome levels on the original Testing data set using Random Forest algorithm
predictfinal <- predict(model2, testingset, type="class")
predictfinal
